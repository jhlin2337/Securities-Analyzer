import requests
import re
from pandas_datareader import data
import pandas as pd
from datetime import datetime, timedelta
import time

class Stock:
	DATA_SOURCE = 'google'
	YEAR = 16

	# Initialize the instance variables in the class
	def __init__(self, ticker_symbol):
		self.ticker_symbol = ticker_symbol.lower()

		# Get the url link for the xml report of the company
		xml_report_link = ''
		search_term = '/' + self.ticker_symbol + '-'
		annual_reports = open('./Index_Page/Annual_Reports_Ticker_XML.txt', 'r')
		for line in annual_reports:
			if search_term in line:
				fields = line.strip().split('     ')
				xml_report_link = fields[len(fields)-1]

		# Request the company's annual report xml file
		url = 'https://www.sec.gov/' + xml_report_link
		r = requests.get(url)
		self.report = r.text

	# Returns the net income of the firm <n> years ago. 
	def get_net_income(self, n):
		regexps = [r'<us-gaap:NetIncomeLoss \s .*</us-gaap:NetIncomeLoss>',
				   r'<us-gaap:ProfitLoss.*</us-gaap:ProfitLoss>',
				   r'<us-gaap:NetIncomeLoss.*</us-gaap:NetIncomeLoss>',
				   r'<us-gaap:IncomeLossFromContinuingOperations.*</us-gaap:IncomeLossFromContinuingOperations>']
		profit_loss = self.attempt_data_retrieval(regexps, n)

		return profit_loss


	# Return the total assets of the firm <n> years ago
	def get_total_assets(self, n):
		regexps = [r'<us-gaap:Assets.*</us-gaap:Assets>']
		total_assets = self.attempt_data_retrieval(regexps, n)

		return total_assets

	# Return the current assets of the firm <n> years ago
	def get_current_assets(self, n):
		regexps = [r'<us-gaap:AssetsCurrent.*</us-gaap:AssetsCurrent>']
		current_assets = self.attempt_data_retrieval(regexps, n)

		return current_assets

	# Return the cash flow from operations of the firm <n> years ago
	def get_operations_cash_flow(self, n):
		regexps = [r'<us-gaap:NetCashProvidedByUsedInOperatingActivities.*</us-gaap:NetCashProvidedByUsedInOperatingActivities']
		cfo = self.attempt_data_retrieval(regexps, n)

		return cfo

	# Return the total liabilities of the firm <n> years ago
	def get_total_liabilities(self, n):
		regexps = [r'<us-gaap:Liabilities.*</us-gaap:Liabilities>']
		total_liabilities = self.attempt_data_retrieval(regexps, n)

		return total_liabilities

	# Return the current liability of the firm <n> years ago
	def get_current_liabilities(self, n):
		regexps = [r'<us-gaap:LiabilitiesCurrent.*</us-gaap:LiabilitiesCurrent>']
		current_liabilities = self.attempt_data_retrieval(regexps, n)

		return current_liabilities

	# Return the total long-term debt of the firm <n> years ago
	def get_long_term_liabilities(self, n):
		regexps = [r'<us-gaap:LongTermDebtNoncurrent.*</us-gaap:LongTermDebtNoncurrent>']
		long_term_liabilities = self.attempt_data_retrieval(regexps, n)

		if long_term_liabilities != 'error':
			return long_term_liabilities

		# Calculate long-term liabilities using total liabilities and current liabilities in
		# the event that the company's annual report does not include long-term liabilities
		total_liabilities = self.get_total_liabilities(n)
		current_liabilities = self.get_current_liabilities(n)

		if total_liabilities == 'error' or current_liabilities == 'error':
			return 'error'

		return str(int(total_liabilities) - int(current_liabilities))


	# Return the revenue generated by the firm <n> years ago
	def get_revenue(self, n):
		regexps = [r'<us-gaap:Revenues.*</us-gaap:Revenues>',
				   r'<us-gaap:SalesRevenueNet.*</us-gaap:SalesRevenueNet>',
				   r'<us-gaap:SalesRevenueGoodsNet.*</us-gaap:SalesRevenueGoodsNet>',
				   r'<us-gaap:.*?Revenue.*?>.*?<.*?Revenue.*?>']
		revenue = self.attempt_data_retrieval(regexps, n)

		return revenue

	# Return the cost of goods sold by the firm in the most recent year
	def get_cost_of_goods_sold(self, n):
		regexps = [r'<us-gaap:CostOfRevenue.*</us-gaap:CostOfRevenue>',
				   r'<us-gaap:CostOfGoodsAndServicesSold.*</us-gaap:CostOfGoodsAndServicesSold>',
				   r'<us-gaap:CostOfGoodsSold.*</us-gaap:CostOfGoodsSold>',
				   r'<us-gaap:.*Cost.*Sales.*</us-gaap:.*Cost.*Sales.*>',
				   r'<us-gaap:.*Cost.*Sold.*</us-gaap:.*Cost.*Sold.*>']
		cogs = self.attempt_data_retrieval(regexps, n)

		if cogs == 'error':
			cogs = '0'

		return cogs

	# Takes an array of regular expressions <regexp> and attempts to find a regular
	# expression that fits with the xml data from the SEC annual report of the company
	def attempt_data_retrieval(self, regexps, n):
		for regexp in regexps:
			data = self.get_number_inside_regexp(regexp, n)
			if data != 'error':
				return data

		return 'error'

	# Returns the number contained inside the <n>th occurence of <regexp>
	def get_number_inside_regexp(self, regexp, n):
		if n < 0:
			n = 0
		if n > 1:
			n = 1

		try:
			# Finds number data inside regexp assuming first result is latest year
			query_data = re.findall(regexp, self.report)
			accounting_number = (re.findall(r'>-?\d+<', query_data[n]))[0]
			accounting_number = accounting_number[1:len(accounting_number)-1]

			try:
				# Finds data inside regexp, looking at contextRef to determine data's fiscal year
				acct_num = 'error'
				query_year = str(self.YEAR - n)
				for line in query_data:
					date_filed = (re.findall(r'contextRef=".*?"', line))[0]
					is_annual = ('YTD' in date_filed or '12-31' in date_filed or 'Q4' in date_filed or 
								'12_31_20' in date_filed or '31_Dec_20' in date_filed)
					is_not_quarter = '10_1' not in date_filed
					is_not_specific = ('us-gaap' not in date_filed and 'usgaap' not in date_filed and 
									   'Member' not in date_filed)
					if query_year in date_filed and is_annual and is_not_quarter and is_not_specific:
						acct_num = line
						acct_num = (re.findall(r'>-?\d+<', acct_num))[0]
						acct_num = acct_num[1:len(acct_num)-1]

				# If contextRef fiscal year search is successful, use the data obtained from that method
				if acct_num != 'error':
					accounting_number = acct_num
			except Exception as e:
				# print(e)
				pass

		except Exception as e:
			accounting_number = 'error'

		return accounting_number

	# If <include_lag_week> is true, get the percentage return of the stock between a week 
	# ago and <num_weeks> ago. Otherwise get the percentage return of the stock between  
	# yesterday and <num_weeks> ago.
	def get_percent_return(self, num_weeks, include_lag_week):
		# Incorporate either a lag day or a lag week into the dates we're using
		end_date = datetime.today()
		if include_lag_week:
			end_date -= timedelta(weeks=1)
		else:
			end_date -= timedelta(days=1)

		# Adjust date if it's on the weekend
		if end_date.weekday() == 6:
			end_date -= timedelta(days=2)
		elif end_date.weekday() == 5:
			end_date -= timedelta(days=1)

		# Create valid start and end dates
		start_date = end_date-timedelta(weeks=num_weeks)
		start_date = start_date.strftime("%Y-%m-%d")
		end_date = end_date.strftime("%Y-%m-%d")

		try:
			# Get the closing value of the stock on the start_date and the end_date
			start_date_data = data.DataReader(self.ticker_symbol, self.DATA_SOURCE, start_date, start_date)
			start_date_price = start_date_data['Close'][0]

			end_date_data = data.DataReader(self.ticker_symbol, self.DATA_SOURCE, end_date, end_date)
			end_date_price = end_date_data['Close'][0]

			# Calculate the percent difference between end_date closing price and start_date
			# closing price and return the value
			percent_return = (end_date_price-start_date_price)/start_date_price
			return percent_return
		except:
			return float("-inf")


# start_time = time.time()

# # stocks = ['kgji', 'amc', 'fosl', 'gco', 'onp', 'css']
# stocks = ['tsla', 'adbe', 'amzn', 'ma', 'fb']

# N = 1
# for ticker in stocks:
# 	print('----------------------------------------------------------------------------')
# 	stock = Stock(ticker)
# 	print('Company Name: ' + ticker)
# 	print('Total Assets: ' + stock.get_total_assets(N))
# 	print('Current Assets: ' + stock.get_current_assets(N))
# 	print('Total Liabilities: ' + stock.get_total_liabilities(N))
# 	print('Current Liabilities: ' + stock.get_current_liabilities(N))
# 	print('Long Term Liabilities: ' + stock.get_long_term_liabilities(N))
# 	print('Net Income: ' + stock.get_net_income(N))
# 	print('Revenue: ' + stock.get_revenue(N))
# 	print('Cost of Goods Sold: ' + stock.get_cost_of_goods_sold(N))
# 	print('Operations Cash Flow: ' + stock.get_operations_cash_flow(N))

# end_time = time.time()
# print(end_time-start_time)